---
- name: create bind log dir
  file:
    path: "{{ bind__log_directory }}"
    state: directory
    owner: bind
    group: bind
    mode: 0755
  when: bind__logging

- name: bind default file
  copy:
    src: etc_default_bind9
    dest: /etc/default/bind9
  notify: Restart bind9

- name: bind named.conf.options
  template:
    src: named.conf.options
    dest: /etc/bind/named.conf.options
    mode: 0644
  notify: Restart bind9

- name: bind named.conf.local
  template:
    src: named.conf.local
    dest: /etc/bind/named.conf.local
    mode: 0644
  notify: Restart bind9

- name: bind internal domain zone
  template:
    src: db.zone
    dest: '{{ bind__zone_directory }}/db.{{ bind__internal_domain }}'
    mode: 0644
  notify: Reload bind9
  register: internal_domain_zone
  when: bind__internal_domain is defined

- name: bind internal domain zone serial
  template:
    src: db.zone.serial
    dest: '{{ bind__zone_directory }}/db.{{ bind__internal_domain }}.serial'
    mode: 0644
  notify: Reload bind9
  when:
    - bind__internal_domain is defined
    - internal_domain_zone is changed

#
# Kludge for dynamic updates
#
- name: dynamic checker file
  template:
    src: ip_check
    dest: "/usr/local/bin/ip_check_{{ item.domain }}"
    mode: 0755
    owner: root
    group: root
  with_items: "{{ bind__dynamic_checker }}"
  when:
    - bind__dynamic_checker is defined

- name: dynamic checker cron
  template:
    src: ip_check_cron
    dest: /etc/cron.d/ip_check
    mode: 0644
  when:
    - bind__dynamic_checker is defined

# Loop on dynamic domain files to check if file is present
- name: bind dynamic additional domain zone entries already exist
  stat:
    path: '{{ bind__zone_directory }}/db.{{ item.name }}'
  register: dynamic_additional_zone_present
  with_items: "{{ bind__additional_domains }}"
  check_mode: no
  when:
    - bind__additional_domains is defined
    - item.type|default('static') == 'dynamic'

# If not exists, create the zone file
- name: bind additional zone dynamic first creation
  template:
    src: db.dynamic_additional_zone
    dest: '{{ bind__zone_directory }}/db.{{ item.item.name }}'
    mode: 0644
  notify: Reload bind9
  register: dynamic_additional_zone
  loop: "{{ dynamic_additional_zone_present.results|from_yaml|list }}"
  loop_control:
    loop_var: item
    label: "{{ item.item.name }}"
  when:
    - item.skipped is not defined
    - item.stat is defined and not item.stat.exists

- name: bind additional domain zone
  template:
    src: db.additional_zone
    dest: '{{ bind__zone_directory }}/db.{{ item.name }}'
    mode: 0644
  notify: Reload bind9
  register: additional_zone
  with_items: "{{ bind__additional_domains }}"
  when:
    - bind__additional_domains is defined
    - item.type|default('static') == 'static'

- name: bind additional domain dynamic keys
  template:
    src: key_additional_zone
    dest: '/etc/bind/key_{{ item.name }}.conf'
    owner: root
    group: bind
    mode: 0640
  notify: Reload bind9
  # register: additional_zone
  with_items: "{{ bind__additional_domains }}"
  when: bind__additional_domains is defined and item.type is defined and item.type == "dynamic"

- name: bind additional domain zone serial
  template:
    src: db.additional_zone.serial
    dest: '{{ bind__zone_directory }}/db.{{ entry.item.name }}.serial'
    mode: 0644
  notify: Reload bind9
  loop: "{{ additional_zone.results|from_yaml|list }}"
  loop_control:
    loop_var: entry
  when:
    - bind__additional_domains is defined
    - additional_zone is changed
    - entry.changed

- name: bind dynamic additional domain zone serial
  template:
    src: db.dynamic_additional_zone.serial
    dest: '{{ bind__zone_directory }}/db.{{ item.item.name }}.serial'
    mode: 0644
  notify: Reload bind9
  loop: "{{ dynamic_additional_zone_present.results|from_yaml|list }}"
  loop_control:
    loop_var: item
    label: "{{ item.item.name }}"
  when:
    - item.skipped is not defined
    - item.stat is defined and not item.stat.exists

- name: bind response policy zone file
  template:
    src: db.rpz
    dest: '{{ bind__rpz_zone_file }}'
    mode: 0644
  notify: Reload bind9
  register: rpz_zone_file
  when:
    - bind__rpz_static is defined or bind__rpz_cname is defined

- name: bind response policy zone file serial
  template:
    src: db.rpz.serial
    dest: '{{ bind__rpz_zone_file }}.serial'
    mode: 0644
  notify: Reload bind9
  when:
    - bind__rpz_static is defined or bind__rpz_cname is defined
    - rpz_zone_file is changed

- name: bind response policy zone deletion
  file:
    path: "{{ bind__rpz_zone_file }}"
    state: absent
  when:
    - bind__rpz_static is not defined
    - bind__rpz_cname is not defined

- name: bind internal domain reverse zones
  template:
    src: db.rev
    dest: "{{ bind__zone_directory }}/db.{{ bind__internal_network|replace('/', '-') }}.rev"
    mode: 0644
  when:
    - bind__internal_network is defined
    - bind__internal_network != None
    - bind__known_networks is not defined or bind__internal_network not in bind__known_networks
  notify: Reload bind9
  register: db_rev

- name: bind internal domain reverse zones serial
  template:
    src: db.rev.serial
    dest: "{{ bind__zone_directory }}/db.{{ bind__internal_network|replace('/', '-') }}.rev.serial"
    mode: 0644
  when:
    - bind__internal_network is defined
    - bind__internal_network != None
    - bind__known_networks is not defined or bind__internal_network not in bind__known_networks
    - db_rev is changed
  notify: Reload bind9

- name: bind known domains reverse zones (may contain internal network)
  template:
    src: db.known.rev
    dest: "{{ bind__zone_directory }}/db.{{ item|replace('/', '-') }}.rev"
    mode: 0644
  with_items: "{{ bind__known_networks }}"
  register: known_rev
  when:
    - bind__known_networks is defined and bind__known_networks != None
  notify: Reload bind9

- name: bind known domains reverse zones (may contain internal network) serial
  template:
    src: db.known.rev.serial
    dest: "{{ bind__zone_directory }}/db.{{ entry.item|replace('/', '-') }}.rev.serial"
    mode: 0644
  loop: "{{ known_rev.results|from_yaml|list }}"
  loop_control:
    loop_var: entry
  when:
    - bind__known_networks is defined
    - bind__known_networks != None
    - known_rev is changed
    - entry.changed
  notify: Reload bind9
